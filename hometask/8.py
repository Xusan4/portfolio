import numpy as np
from scipy import stats

#  1. Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks): zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]. Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy Полученные значения должны быть равны. Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков, а затем с использованием функций из библиотек numpy и pandas.

print('Первая задача')
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

cov = np.mean(zp * ks) - np.mean(zp) * np.mean(ks)
print(cov)
print(np.cov(zp, ks, ddof=0))

cor = cov / np.std(zp, ddof=0) / np.std(ks, ddof=0)
print(cor)
print(np.corrcoef(zp, ks))

#  2. Измерены значения IQ выборки студентов, обучающихся в местных технических вузах: 131, 125, 115, 122, 131, 115, 107, 99, 125, 111. Известно, что в генеральной совокупности IQ распределен нормально. Найдите доверительный интервал для математического ожидания с надежностью 0.95.

print('\nВторая задача')
x = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
alfa = 0.05
mu = np.mean(x)
t_alfa = stats.t.ppf(1 - alfa/2, len(x) - 1)
print('Верхний доверительный предел =', mu + t_alfa * np.std(x, ddof=1) / np.sqrt(len(x)))
print('Нижний доверительный предел =', mu - t_alfa * np.std(x, ddof=1) / np.sqrt(len(x)))

# 3. Известно, что рост футболистов в сборной распределен нормально с дисперсией генеральной совокупности, равной 25 кв.см. Объем выборки равен 27, среднее выборочное составляет 174.2. Найдите доверительный интервал для математического ожидания с надежностью 0.95.

print('\nТретья задача')
d = 25
n = 27
mu = 174.2
alfa = 0.05
t_alfa = stats.t.ppf(1 - alfa/2, n - 1)
print('Верхний доверительный предел =', mu + t_alfa * np.sqrt(d / n))
print('Нижний доверительный предел =', mu - t_alfa * np.sqrt(d / n))
